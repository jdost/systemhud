#!/usr/bin/env python3

from typing import Tuple

from systemhud import Applet, InteractionType
from systemhud.lib.acpi import Battery, Status
from systemhud.ui import colors
from systemhud.ui.icons import BaseIcon
from systemhud.ui.icons import current_theme as ICONS
from systemhud.ui.notifications import Notification, progress_bar

applet = Applet("acpi")
battery = Battery("BAT0")
last_reading: Tuple[bool, int] = (False, 0)
notification = Notification("acpi", timeout=2000)


async def _show_notification(
    timeout: int = 2000, transient: bool = False
) -> None:
    global battery

    if battery.status is Status.DISCHARGING:
        remaining = await battery.remaining
        notification(
            title="Battery Discharging",
            body=(
                progress_bar(
                    battery.capacity,
                    color=colors.RYG_GRADIENT(battery.capacity),
                )
                + f"{battery.capacity}% -- {remaining} remaining"
            ),
            icon=f"battery-level-{int(battery.capacity/10)}0",
            timeout=timeout,
            transient=transient,
        )
    elif battery.status is Status.CHARGING:
        remaining = await battery.remaining
        notification(
            title="Battery Charging",
            body=(
                progress_bar(battery.capacity, color=colors.WHITE)
                + f"{battery.capacity}% -- {remaining} until full"
            ),
            icon=f"battery-level-{int(battery.capacity/10)}0-charging",
            timeout=timeout,
            transient=transient,
        )
    elif battery.status is Status.FULL:
        notification(
            title="Battery Full",
            body="Running on AC",
            icon="ac-adapter",
            timeout=timeout,
            transient=True,
        )
    else:
        notification(
            title="Battery UNKNOWN",
            body="Status Unknown",
            icon="battery-missing",
            timeout=timeout,
            transient=True,
        )


@applet.interaction(InteractionType.LEFT_CLICK)
async def show_notification() -> None:
    await _show_notification()


@applet.timed_update(2)
async def get_battery_level() -> BaseIcon:
    global battery, last_reading, notification
    battery.uncache()
    result = ICONS.UNKNOWN

    if battery.status is Status.FULL:
        if not last_reading[0] or last_reading[1] != 100:
            await _show_notification(timeout=1, transient=True)
        result = ICONS.AC
    elif battery.status is Status.CHARGING:
        if not last_reading[0] or last_reading[1] != battery.capacity:
            await _show_notification(timeout=1, transient=False)
        result = ICONS.BATTERY_LEVELS(battery.capacity)
    elif battery.status is Status.DISCHARGING:
        if last_reading[0] or last_reading[1] != battery.capacity:
            await _show_notification(timeout=1, transient=False)
        result = BaseIcon(
            ICONS.BATTERY_LEVELS(battery.capacity).icon,
            fg=colors.RYG_GRADIENT(battery.capacity),
        )

    last_reading = battery.status is not Status.DISCHARGING, battery.capacity
    return result


if __name__ == "__main__":
    applet.run()
