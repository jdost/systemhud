#!/usr/bin/env python3

"""
TODO
 - change the ac adaptor watch to work off of `udevadm` output for the adaptor
   ^ toggles the timer for level testing
 - add in some notification events around ac change...
"""

import signal
from time import sleep
from typing import Optional

from systemhud import register_signal, run, timed_updates
from systemhud.lib import acpi
from systemhud.ui.common import ryg_gradient
from systemhud.ui.icons import ProgressiveValue, set_icon
from systemhud.ui.notifications import Notification, progress_bar

PERIOD = 4
ICON_AC = ""
ICON_UNKNOWN = "?"
LEVEL_ICON = ProgressiveValue("")


battery = acpi.Battery("BAT0")
notification = Notification(transient=True, timeout=2000)


async def update_icon() -> None:
    global battery, LEVEL_ICON

    battery.uncache()

    if battery.status is acpi.Status.FULL:
        set_icon(ICON_AC)
    elif battery.status is acpi.Status.CHARGING:
        set_icon(LEVEL_ICON(battery.capacity))
    elif battery.status is acpi.Status.DISCHARGING:
        set_icon(
            f"%{{F#{ryg_gradient(battery.capacity)}}}"
            f"{LEVEL_ICON(battery.capacity)}%{{F-}}"
        )
    else:
        set_icon(ICON_UNKNOWN)


async def summary_notification(*_) -> None:
    global battery

    if battery.status is acpi.Status.DISCHARGING:
        remaining = await battery.remaining
        notification(
            title="Battery Discharging",
            body=(
                progress_bar(
                    battery.capacity, color=ryg_gradient(battery.capacity)
                )
                + f"{battery.capacity}% -- {remaining} remaining"
            ),
            icon=f"battery-level-{int(battery.capacity/10)}0",
        )
    elif battery.status is acpi.Status.CHARGING:
        remaining = await battery.remaining
        notification(
            title="Battery Charging",
            body=(
                progress_bar(battery.capacity, color="FFFFFF")
                + f"{battery.capacity}% -- {remaining} until full"
            ),
            icon=f"battery-level-{int(battery.capacity/10)}0-charging",
        )
    elif battery.status is acpi.Status.FULL:
        notification(
            title="Battery Full",
            body="Running on AC",
            icon="ac-adapter",
        )
    else:
        notification(
            title="Battery UNKNOWN",
            body="Status Unknown",
            icon="battery-missing",
        )


async def main() -> None:
    register_signal(signal.SIGUSR1, summary_notification)
    await timed_updates(update_icon, PERIOD)


if __name__ == "__main__":
    run(main)
