#!/usr/bin/env python3

from systemhud import Applet, InteractionType
from systemhud.lib import cpu
from systemhud.streams import capture
from systemhud.ui import colors, pango
from systemhud.ui.icons import BaseIcon
from systemhud.ui.icons import current_theme as ICONS
from systemhud.ui.notifications import Notification

applet = Applet("cpu")
notification = Notification(
    "cpustats", icon="cpu", transient=True, timeout=4000
)


@applet.timed_update(1)
async def check_cpus() -> BaseIcon:
    v = cpu.diffs(update=True)
    return ICONS.CPU(v[0].usage_percent)


def pango_gradient_number(n: int) -> str:
    return pango.wrap(f"{n:02.0f}", foreground=colors.GYR_GRADIENT(n))


@applet.interaction(InteractionType.LEFT_CLICK)
async def summary_notification() -> None:
    global notification
    stat_rows = ["usage", "user", "system", "nice", "iowait", "steal"]
    proc_count = 5

    body = (
        pango.wrap("Usage Per Core:", size="large", weight="bold")
        + "\n"
        + pango.span_tag(font=pango.MONOSPACE)
    )

    cpus = cpu.diffs()

    col_1_fmt = f"{{:>{max([len(c) for c in (['cpu'] + stat_rows)])}}}"
    body += (" ".join([col_1_fmt] + ["{:>2}"] * len(cpus))).format(
        *["cpu"] + [str(c) for c in range(1, len(cpus) + 1)]
    )
    body += "\n"

    for row_prop in stat_rows:
        body += col_1_fmt.format(row_prop)
        for c in cpus:
            colored_number = pango_gradient_number(
                int(getattr(c, row_prop) / c.total * 100)
            )
            body += f" {colored_number}"
        body += "\n"

    body += pango.CLOSE_TAG

    body += "\n"
    body += pango.wrap(
        f"Top {proc_count} Processes:", size="large", weight="bold"
    )
    body += "\n"
    body += pango.span_tag(font=pango.MONOSPACE)

    by_process = []
    for line_raw in await capture("ps -o %cpu,comm,cmd,pid ax --no-headers"):
        if not line_raw:
            continue

        perc, name, r = line_raw.split(maxsplit=2)
        cmd, pid = r.rsplit(maxsplit=1)
        by_process.append((float(perc), name, cmd, pid))

    for proc in sorted(by_process, reverse=True)[:proc_count]:
        body += "{}% <u>{}</u> ({})\n".format(
            proc[0], proc[2] if len(proc[2]) < 20 else proc[1], proc[3]
        )

    body += pango.CLOSE_TAG
    notification(
        title="CPU USAGE",
        body=body,
    )


if __name__ == "__main__":
    applet.run()
