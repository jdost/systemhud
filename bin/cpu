#!/usr/bin/env python3

import signal

from systemhud import register_signal, run, timed_updates
from systemhud.lib import cpu
from systemhud.ui.common import gyr_gradient
from systemhud.ui.icons import set_icon
from systemhud.ui.notifications import Notification
from systemhud.util import capture

PERIOD = 1
ICON = "ï¡š"
NOTIFICATION_ROWS = ["usage", "user", "system", "nice", "iowait", "steal"]
TOP_PROC_COUNT = 5
NOTIFICATION = Notification(
    "cpustats", icon="cpu", transient=True, timeout=4000
)


async def update_icon() -> None:
    v = cpu.diffs(update=True)
    set_icon(ICON, foreground=gyr_gradient(v[0].usage_percent))


def colored_number(n: int) -> str:
    color = gyr_gradient(n)
    return "<span foreground='#{}'>{:02.0f}</span>".format(color, n)


async def summary_notification(*_) -> None:
    global NOTIFICATION_ROWS, NOTIFICATION

    body = (
        "<b><big>Usage Per Core:</big></b>\n"
        "<span font_desc='Anonymice Nerd Font Mono'>"
    )

    cpus = cpu.diffs()

    col_1_fmt = f"{{:>{max([len(c) for c in (['cpu'] + NOTIFICATION_ROWS)])}}}"
    body += (" ".join([col_1_fmt] + ["{:>2}"] * len(cpus))).format(
        *["cpu"] + [str(c) for c in range(1, len(cpus) + 1)]
    )
    body += "\n"

    for row_prop in NOTIFICATION_ROWS:
        body += col_1_fmt.format(row_prop)
        for c in cpus:
            body += (
                f" {colored_number(int(getattr(c, row_prop) / c.total * 100))}"
            )
        body += "\n"

    body += "</span>"

    body += "\n<b><big>Top {} Processes:</big></b>\n".format(TOP_PROC_COUNT)
    body += "<span font_desc='Anonymice Nerd Font Mono'>"

    by_process = []
    for line_raw in await capture("ps -o %cpu,comm,cmd,pid ax --no-headers"):
        if not line_raw:
            continue

        perc, name, r = line_raw.split(maxsplit=2)
        cmd, pid = r.rsplit(maxsplit=1)
        by_process.append((float(perc), name, cmd, pid))

    for proc in sorted(by_process, reverse=True)[:TOP_PROC_COUNT]:
        body += "{}% <u>{}</u> ({})\n".format(
            proc[0], proc[2] if len(proc[2]) < 20 else proc[1], proc[3]
        )

    body += "</span>"
    NOTIFICATION(
        title="CPU USAGE",
        body=body,
    )


async def main() -> None:
    register_signal(signal.SIGUSR1, summary_notification)
    await timed_updates(update_icon, PERIOD)


if __name__ == "__main__":
    run(main)
