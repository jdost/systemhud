#!/usr/bin/env python3

import signal

from systemhud import register_signal, run, timed_updates
from systemhud.lib import memory
from systemhud.ui.common import gyr_gradient
from systemhud.ui.icons import set_icon
from systemhud.ui.notifications import Notification
from systemhud.util import capture

PERIOD = 2
ICON = "î‰¦"
MEMORY = memory.Memory()
NOTIFICATION = Notification(
    "meminfo", icon="device_mem", transient=True, timeout=4000
)
PREFIXES = "kMGT"
TOP_PROC_COUNT = 5


def format_space(src_i: int) -> str:
    src = src_i * 1.0
    for prefix in PREFIXES:
        if src < 9999:
            return f"{str(src)[:4].rstrip('.')} {prefix}"
        src /= 1024

    return str(src)


async def update_icon() -> None:
    MEMORY.update()
    set_icon(ICON, foreground=gyr_gradient(MEMORY.perc_used))


async def summary_notification(*_) -> None:
    body = (
        "<big>"
        f"     Free: {format_space(MEMORY.free)}B\n"
        f"     Buffered: {format_space(MEMORY.buffered)}B\n"
        f"     Cached: {format_space(MEMORY.cached)}B\n"
        "</big>"
        f"<b>Top {TOP_PROC_COUNT} Processes:</b>"
        "<span font_desc='Anonymice Nerd Font Mono'>"
    )

    by_process = []
    for line_raw in await capture("ps -o rss,comm,cmd,pid ax --no-headers"):
        if not line_raw:
            continue

        mem, name, r = line_raw.split(maxsplit=2)
        cmd, pid = r.rsplit(maxsplit=1)
        by_process.append((int(mem), name, cmd, pid))

    for proc in sorted(by_process, reverse=True)[:TOP_PROC_COUNT]:
        cmd = proc[2] if len(proc[2]) < 20 else proc[1]
        body += f"\n  {format_space(proc[0])}b <u>{cmd}</u> ({proc[3]})"

    NOTIFICATION(
        title="Memory Usage",
        body=body + "</span>",
    )


async def main() -> None:
    register_signal(signal.SIGUSR1, summary_notification)
    await timed_updates(update_icon, PERIOD)


if __name__ == "__main__":
    run(main)
