#!/usr/bin/env python3

from systemhud import Applet, InteractionType
from systemhud.lib.memory import Memory
from systemhud.streams import capture
from systemhud.ui import pango
from systemhud.ui.icons import BaseIcon
from systemhud.ui.icons import current_theme as ICONS
from systemhud.ui.notifications import Notification

applet = Applet("memory")
tracked_memory = Memory()
notification = Notification(
    "meminfo", icon="device_mem", transient=True, timeout=4000
)


@applet.timed_update(2)
async def check_memory() -> BaseIcon:
    global tracked_memory
    tracked_memory.update()
    return ICONS.MEMORY(tracked_memory.perc_used)


def format_space(src_i: int) -> str:
    src = src_i * 1.0
    for prefix in "kMGT":
        if src < 9999:
            return f"{str(src)[:4].rstrip('.')} {prefix}"
        src /= 1024

    return str(src)


@applet.interaction(InteractionType.LEFT_CLICK)
async def summary_notification() -> None:
    global tracked_memory
    DISPLAY_PROCS = 5

    body = (
        pango.wrap(
            (
                f"     Free: {format_space(tracked_memory.free)}B\n"
                f"     Buffered: {format_space(tracked_memory.buffered)}B\n"
                f"     Cached: {format_space(tracked_memory.cached)}B\n"
            ),
            size="large",
        )
        + pango.wrap(f"Top {DISPLAY_PROCS} Processes", weight="bold")
        + pango.span_tag(font=pango.MONOSPACE)
    )

    by_process = []
    for line_raw in await capture("ps -o rss,comm,cmd,pid ax --no-headers"):
        if not line_raw:
            continue

        mem, name, r = line_raw.split(maxsplit=2)
        cmd, pid = r.rsplit(maxsplit=1)
        by_process.append((int(mem), name, cmd, pid))

    for proc in sorted(by_process, reverse=True)[:DISPLAY_PROCS]:
        cmd = proc[2] if len(proc[2]) < 20 else proc[1]
        body += f"\n  {format_space(proc[0])}b {pango.wrap(cmd, underline='single')} ({proc[3]})"

    notification(
        title="Memory Usage",
        body=body + pango.CLOSE_TAG,
    )


if __name__ == "__main__":
    applet.run()
