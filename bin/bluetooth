#!/usr/bin/env python3

import asyncio
from typing import Dict, Optional

from systemhud import Applet, InteractionType
from systemhud.lib import bluetooth
from systemhud.ui import rofi
from systemhud.ui.icons import BaseIcon
from systemhud.ui.icons import current_theme as ICONS
from systemhud.ui.notifications import Notification

CTRLR_KEY = "__CONTROLLER__"
applet = Applet("bluetooth")
devices: Dict[str, bluetooth.Device] = {}
per_device_notifications: Dict[str, Notification] = {
    CTRLR_KEY: Notification("bluetooth", icon="bluetooth", timeout=1500)
}


@applet.readiness
async def get_devices() -> bool:
    global devices

    try:
        status = await bluetooth.get_status()
    except Exception:
        return False

    if status:
        devices = await bluetooth.get_devices()

    if not status:
        applet.print_icon(ICONS.BLUETOOTH.off)
    elif any([d.connected for d in devices.values()]):
        applet.print_icon(ICONS.BLUETOOTH.connected)
    else:
        applet.print_icon(ICONS.BLUETOOTH.on)

    return True


@applet.stream_update("bluetoothctl")
async def parse_status_line(line: str) -> Optional[BaseIcon]:
    global devices

    (
        dev_status,
        dev_type,
        dev_id,
        meta,
    ) = bluetooth.parse_logline(line)

    if dev_type is bluetooth.Type.CONTROLLER:
        try:
            k, v = meta.split(":", 1)
        except ValueError:
            return None

        if k.strip() == "Powered":
            on = v.strip() == "yes"
            per_device_notifications[CTRLR_KEY](
                title="Bluetooth Controller",
                body=("Powered On" if on else "Powered Off"),
                image=("bluetooth-active" if on else "bluetooth-disabled"),
                transient=not on,
            )
            if on:
                devices = await bluetooth.get_devices()
            return ICONS.BLUETOOTH.on if on else ICONS.BLUETOOTH.off
    elif dev_type is bluetooth.Type.DEVICE:
        # This is not a paired devices, TODO support handling pairing a device
        if dev_id not in devices:
            return None

        if dev_status is bluetooth.Status.CHANGED:
            if await devices[dev_id].update():
                device = devices[dev_id]

                per_device_notifications.setdefault(
                    device.device_id,
                    Notification("bluetooth", icon="bluetooth", timeout=1500),
                )(
                    title=device.name,
                    body="Connected" if device.connected else "Disconnected",
                    image=device.icon,
                    transient=not device.connected,
                )
                if device.connected:
                    return ICONS.BLUETOOTH.connected
                elif not any([d.connected for d in devices.values()]):
                    return ICONS.BLUETOOTH.on

    return None


@applet.interaction(InteractionType.LEFT_CLICK)
async def rofi_toggles() -> None:
    devices = await bluetooth.get_devices()
    status = bool(await bluetooth.get_status())
    entries = [
        rofi.Entry(
            "Controller", active=status, icon="bluetooth", value=CTRLR_KEY
        )
    ]
    entries += [
        rofi.Entry(
            dev.name, active=dev.connected, icon=dev.icon, value=dev.device_id
        )
        for dev in devices.values()
    ]

    selection = await rofi.rofi(entries, theme="icons")
    if not selection:
        return
    if selection.value == CTRLR_KEY:
        if status:
            await asyncio.gather(
                *[d.toggle() for d in devices.values() if d.connected]
            )
        await bluetooth.toggle()
    else:
        # Turn on the controller if it is off, otherwise we *know* the toggle
        # will fail
        if not status:
            await bluetooth.toggle()
        assert selection.value in devices
        await devices[selection.value].toggle()


if __name__ == "__main__":
    applet.run()
