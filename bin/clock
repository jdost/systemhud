#!/usr/bin/env python3

"""
Features:
- right click will pop up notifs for all upcoming appointments for the day
"""

import datetime
from typing import List

from systemhud import Applet, InteractionType
from systemhud.lib import calcurse
from systemhud.ui import calendar, colors, pango
from systemhud.ui.icons import BaseIcon
from systemhud.ui.notifications import Notification

applet = Applet("clock")
calendar_notification = Notification(
    "calendar", icon="calendar", transient=True, timeout=4000
)

# ms the notifications show up between phases
SCHEDULED_NOTIFICATION_TIMEOUT = 15000


class NextAppointment:
    PHASES = [
        datetime.timedelta(minutes=20),
        datetime.timedelta(minutes=5),
        datetime.timedelta(minutes=0),
        datetime.timedelta(minutes=-10),
    ]
    PHASE_COLORS = [colors.CLEAR, colors.YELLOW, colors.RED, colors.CYAN]
    last_phase: int

    def __init__(self):
        self.appt = None
        self._notification = None
        self.bgcolor = colors.CLEAR
        self.last_phase = 0

    async def update(self, current: datetime.datetime) -> None:
        if self.appt is None or self.last_phase >= len(self.PHASES):
            await self._get_next(current)
        else:
            time_until = self.appt.start - current
            if time_until > datetime.timedelta(minutes=30) and (
                time_until.seconds % 300 == 0
            ):
                await self._get_next(current)

        if self.appt is None:
            return

        if self.PHASES[self.last_phase] > (self.appt.start - current):
            self.last_phase += 1
            if self.last_phase < len(self.PHASES):
                self.notification(scheduled=True, relative=True)
                self.bgcolor = self.PHASE_COLORS[self.last_phase].with_opacity(
                    0.3
                )

    async def _get_next(self, current) -> None:
        global appointments

        for appointment in await appointments.iter():
            if (appointment.start - current) < self.PHASES[-1]:
                continue

            self.appt = appointment
            break

        if self.appt is None:
            self.appt = calcurse.max_appointment

        self._notification = None
        self.last_phase = 0
        time_until = self.appt.start - current
        while time_until < self.PHASES[self.last_phase]:
            self.last_phase += 1

        self.bgcolor = self.PHASE_COLORS[self.last_phase].with_opacity(0.3)

    @property
    async def phase_color(self) -> colors.Color:
        now = datetime.datetime.now()
        if self.appt is None:
            return colors.CLEAR

        time_until = self.appt.start - now
        for i, phase in enumerate(self.PHASES):
            if time_until > phase:
                return self.PHASE_COLORS[i]

        await self._get_next(now)
        return await self.phase_color

    def notification(
        self, scheduled: bool = False, relative: bool = False
    ) -> None:
        if self._notification is None:
            self._notification = Notification(
                "calendar", icon="calendar", transient=False, timeout=4000
            )

        assert self.appt is not None

        body: str
        if relative:
            if datetime.datetime.now() > self.appt.start:
                body = "Started"
            else:
                minutes = round(
                    (self.appt.start - datetime.datetime.now()).seconds / 60
                )
                body = f"Starts in {minutes} minutes..."
        else:
            body = f"Starts @ {self.appt.start.strftime('%H:%M')}"

        self._notification(
            title=self.appt.name,
            body=body,
            timeout=SCHEDULED_NOTIFICATION_TIMEOUT if scheduled else 4000,
        )


class AppointmentCache:
    def __init__(self, expiration: datetime.timedelta) -> None:
        self.cache: List[calcurse.Appointment] = []
        self.timestamp: datetime.datetime = datetime.datetime.min
        self.expiration = expiration

    async def _refresh(self) -> None:
        self.cache = await calcurse.get_appointments(days=30)
        self.timestamp = datetime.datetime.now()

    async def iter(self):
        now = datetime.datetime.now()
        if now - self.timestamp > self.expiration:
            await self._refresh()

        return self.cache.__iter__()


appointments = AppointmentCache(datetime.timedelta(minutes=5))
next_appointment = NextAppointment()


@applet.timed_update(1)
async def update_clock() -> BaseIcon:
    global appointments, next_appointment

    now = datetime.datetime.now()
    await next_appointment.update(now)
    return BaseIcon(
        now.strftime("%H:%M:%S"),
        bg=next_appointment.bgcolor,
        offset=True,
    )


@applet.interaction(InteractionType.LEFT_CLICK)
async def show_calendar_notification() -> None:
    c = calendar.Calendar(datetime.datetime.now())
    calendar_notification(
        title=c.label,
        body=pango.wrap(
            "\n".join(
                c.rows([a.start.date() for a in await appointments.iter()])
            ),
            font=pango.MONOSPACE,
            size=14,
        ),
    )


if __name__ == "__main__":
    applet.run()
