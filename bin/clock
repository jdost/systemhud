#!/usr/bin/env python3

"""
Features:
- right click will pop up notifs for all upcoming appointments for the day
"""

import datetime
import signal
from typing import Iterator, List, Optional, Tuple

from systemhud import register_signal, run, timed_updates
from systemhud.lib import calcurse
from systemhud.ui import calendar, colors
from systemhud.ui.icons import set_icon
from systemhud.ui.notifications import Notification
from systemhud.ui.pango import MONOSPACE, wrap

# ms the notifications show up between phases
SCHEDULED_NOTIFICATION_TIMEOUT = 15000


class NextAppointment:
    PHASES = [
        datetime.timedelta(minutes=20),
        datetime.timedelta(minutes=5),
        datetime.timedelta(minutes=0),
        datetime.timedelta(minutes=-10),
    ]
    PHASE_COLORS = ["", colors.YELLOW, colors.RED, colors.CYAN]
    last_phase: int

    def __init__(self):
        self.appt = None
        self._notification = None
        self.bgcolor = ""
        self.last_phase = 0

    async def update(self, current: datetime.datetime) -> None:
        if self.appt is None or self.last_phase >= len(self.PHASES):
            await self._get_next(current)

        assert self.appt is not None
        if self.PHASES[self.last_phase] > (self.appt.start - current):
            self.last_phase += 1
            if self.last_phase < len(self.PHASES):
                self.notification(scheduled=True, relative=True)
                self.bgcolor = colors.with_opacity(
                    self.PHASE_COLORS[self.last_phase], opacity=0.3
                )

    async def _get_next(self, current) -> None:
        global appointments

        for appointment in await appointments.iter():
            if (appointment.start - current) < self.PHASES[-1]:
                continue

            self.appt = appointment
            break

        assert self.appt is not None

        self._notification = None
        self.last_phase = 0
        time_until = self.appt.start - current
        while time_until < self.PHASES[self.last_phase]:
            self.last_phase += 1

        self.bgcolor = colors.with_opacity(
            self.PHASE_COLORS[self.last_phase], opacity=0.3
        )

    @property
    async def phase_color(self) -> str:
        now = datetime.datetime.now()
        assert self.appt is not None
        time_until = self.appt.start - now
        for i, phase in enumerate(self.PHASES):
            if time_until > phase:
                return self.PHASE_COLORS[i]

        await self._get_next(now)
        return await self.phase_color

    def notification(
        self, scheduled: bool = False, relative: bool = False
    ) -> None:
        if self._notification is None:
            self._notification = Notification(
                "calendar", icon="calendar", transient=False, timeout=4000
            )

        body: str
        if relative:
            diff = self.appt.start <= datetime.datetime.now()
            if diff <= 0:
                body = "Started"
            else:
                body = f"Starts in {diff.minutes} minutes..."
        else:
            body = f"Starts @ {self.appt.start.strftime('%H:%M')}"

        assert self.appt is not None
        self._notification(
            title=self.appt.name,
            body=body,
            timeout=SCHEDULED_NOTIFICATION_TIMEOUT if scheduled else 4000,
        )


class AppointmentCache:
    def __init__(self, expiration: datetime.timedelta) -> None:
        self.cache: List[calcurse.Appointment] = []
        self.timestamp: datetime.datetime = datetime.datetime.min
        self.expiration = expiration

    async def _refresh(self) -> None:
        self.cache = await calcurse.get_appointments(days=30)
        self.timestamp = datetime.datetime.now()

    async def iter(self):
        now = datetime.datetime.now()
        if now - self.timestamp > self.expiration:
            await self._refresh()

        return self.cache.__iter__()


calendar_notification = Notification(
    "calendar", icon="calendar", transient=True, timeout=4000
)
appointments = AppointmentCache(datetime.timedelta(minutes=5))
next_appointment = NextAppointment()


async def update_clock() -> None:
    global appointments, next_appointment

    now = datetime.datetime.now()
    await next_appointment.update(now)
    set_icon(
        now.strftime("%H:%M:%S"),
        background=next_appointment.bgcolor,
        offset=True,
    )


async def show_calendar_notification(*_) -> None:
    c = calendar.Calendar(datetime.datetime.now())
    calendar_notification(
        title=c.label,
        body=wrap(
            "\n".join(
                c.rows([a.start.date() for a in await appointments.iter()])
            ),
            font=MONOSPACE,
            size=14,
        ),
    )


async def show_schedule_notification(*_) -> None:
    pass


async def main() -> None:
    register_signal(signal.SIGUSR1, show_calendar_notification)
    register_signal(signal.SIGUSR2, show_schedule_notification)
    await timed_updates(update_clock, 1)


if __name__ == "__main__":
    run(main)
