#!/usr/bin/env python3

from typing import Optional

from systemhud import Applet, InteractionType
from systemhud.lib import pulseaudio
from systemhud.ui import colors, rofi
from systemhud.ui.icons import BaseIcon, EqDotsIcon
from systemhud.ui.icons import current_theme as ICONS
from systemhud.ui.notifications import Notification, progress_bar

applet = Applet("pulseaudio")
notification = Notification(
    "pulseaudio",
    icon="audio-speakers",
    transient=True,
    timeout=2000,
)
sinks = pulseaudio.Devices(pulseaudio.Type.SINK)
sources = pulseaudio.Devices(pulseaudio.Type.SOURCE)


class PulseIcon(BaseIcon):
    def __init__(self):
        self.eqdots = EqDotsIcon()
        self.out_volume = sinks.default.volume
        self.in_volume = sources.default.volume
        super().__init__("")

    def __str__(self) -> str:
        return (
            f"{self.eqdots(self.out_volume)}%{{O-7}}"
            f"{self.eqdots(self.in_volume)}%{{O-14}}%{{F-}} "
        )


@applet.readiness
async def wait_for_pulse_socket() -> bool:
    try:
        await sinks.update()
        await sources.update()
        applet.print_icon(PulseIcon())
    except AssertionError as e:
        applet.print_icon(ICONS.UNKNOWN)
        return False

    return True


@applet.stream_update("pactl subscribe")
async def parse_state_update(line: str) -> Optional[BaseIcon]:
    global sinks, sources
    update = False
    evt, dev_type, dev_id = pulseaudio.parse_event(line)

    if dev_type is None:
        return

    devs = sinks if dev_type is pulseaudio.Type.SINK else sources

    before = None
    prev_default = devs.default
    if evt is pulseaudio.Event.CHANGE:
        if dev_id not in devs.devices:
            return
        before = devs.devices[dev_id]

    if dev_type is pulseaudio.Type.SINK:
        await sinks.update()
    elif dev_type is pulseaudio.Type.SOURCE:
        await sources.update()
        update = True

    if evt is pulseaudio.Event.CHANGE:
        if dev_id == devs.default.device_id:
            update = True

        after = devs.devices[dev_id]
        assert isinstance(before, pulseaudio.Device)
        assert isinstance(after, pulseaudio.Device)

        if before.muted != after.muted:
            await volume_notification(after)
        elif before.volume != after.volume:
            await volume_notification(after)
    else:
        if prev_default.device_id != devs.default.device_id:
            # Notify that the default input/output changed
            pass
        update = True

    return PulseIcon() if update else None


async def volume_notification(dev) -> None:
    if dev.muted:
        notification(
            title=dev.name,
            body="Muted",
            icon=(
                "audio-speakers"
                if dev.device_type is pulseaudio.Type.SINK
                else "audio-input-microphone"
            ),
        )
    else:
        notification(
            title=dev.name,
            body=progress_bar(dev.volume, color=colors.WHITE),
            icon=(
                "audio-speakers"
                if dev.device_type is pulseaudio.Type.SINK
                else "audio-input-microphone"
            ),
        )


@applet.interaction(InteractionType.LEFT_CLICK)
async def volume_popup() -> None:
    dev = sinks.default

    selection = await rofi.rofi(
        [
            rofi.Entry("Decrease", icon="audio-volume-low", value="decrease"),
            rofi.Entry(
                f"{int(dev.volume)}% / " + ("Unmute" if dev.muted else "Mute"),
                icon="audio-volume-muted",
                value="mute",
                urgent=dev.muted,
            ),
            rofi.Entry("Increase", icon="audio-volume-high", value="increase"),
        ],
        theme="icons",
    )
    if not selection:
        return

    if selection.value == "mute":
        await dev.toggle_mute()
    elif selection.value == "decrease":
        await dev.set_volume(dev.volume - 10)
    elif selection.value == "increase":
        await dev.set_volume(dev.volume + 10)


@applet.interaction(InteractionType.RIGHT_CLICK)
async def default_volume_popup() -> None:
    await device_popup(sinks)


async def device_popup(devs: pulseaudio.Devices) -> None:
    _SWITCH_KEY = "__SWITCH__"
    entries = [
        rofi.Entry(
            "Select " + ("Output" if devs is sources else "Input"),
            value=_SWITCH_KEY,
        )
    ] + [
        rofi.Entry(d.name, active=d is devs.default, value=str(d.device_id))
        for d in devs.devices.values()
    ]

    selection = await rofi.rofi(entries, theme="text")
    if not selection:
        return

    assert selection.value is not None
    selected_value = int(selection.value)
    if selected_value == _SWITCH_KEY:
        await device_popup(sources if devs is sinks else sinks)
    elif selected_value in devs.devices:
        await devs.devices[selected_value].set_default()


if __name__ == "__main__":
    applet.run()
