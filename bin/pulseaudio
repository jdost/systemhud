#!/usr/bin/env python3

"""
TODO:
 - USR1 will pop up a rofi with two scripts, one to list sinks, one sources
"""

import enum
import signal
import subprocess
from datetime import datetime, timedelta
from time import sleep
from typing import Optional

from systemhud import register_signal, run, timed_updates
from systemhud.lib import pulseaudio
from systemhud.ui.icons import dots, set_icon
from systemhud.ui.notifications import Notification, progress_bar
from systemhud.util import set_pidfile

PERIOD = 5
PROGRESS_BAR_COLOR = "FFFFFF"


SINK = pulseaudio.Device(pulseaudio.Type.SINK)
SOURCE = pulseaudio.Device(pulseaudio.Type.SOURCE)
NOTIFICATION = Notification(
    "pulsemonitor",
    icon="audio-speakers",
    transient=True,
    timeout=2000,
)
last_refresh = datetime.now()
REFRESH_PERIOD = timedelta(minutes=5)


async def update_icon() -> None:
    global last_refresh

    if datetime.now() - last_refresh > REFRESH_PERIOD:
        await refresh()

    set_icon(
        f"{dots(await SINK.volume)}%{{O-7}}{dots(await SOURCE.volume)}%{{O-11}}%{{F-}}"
    )


async def refresh() -> None:
    global last_refresh
    last_refresh = datetime.now()

    await SINK.update()
    await SOURCE.update()


async def summary_notification(*_) -> None:
    global SINK, NOTIFICATION
    NOTIFICATION(
        title=SINK.name,
        body=progress_bar(SINK.volume, color=PROGRESS_BAR_COLOR),
    )
    await update_icon()


async def main() -> None:
    await refresh()
    register_signal(signal.SIGUSR1, summary_notification)
    register_signal(signal.SIGHUP, refresh)
    await timed_updates(update_icon, PERIOD)


if __name__ == "__main__":
    set_pidfile("pulseaudio")
    run(main)
